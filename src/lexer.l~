%{

// this will be added to the top of your lexer.c file

#include "bridge.hpp"

#define GET_COLUMN() yyget_extra(yyscanner)
#define SET_COLUMN(x) yyset_extra((x), yyscanner)
#define INC_COLUMN(x) yyset_extra(GET_COLUMN() + (x), yyscanner)

#define LOC(x) (yy::parser::location_type { nullptr, yylineno, (x) })

#define TOK(t, x, ...) \
	make_symbol(yylval, yy::parser::make_ ##t (__VA_ARGS__ __VA_OPT__(,) LOC(x)))

#define yyterminate() return TOK(YYEOF, GET_COLUMN())

static int make_symbol(YYSTYPE*, YYSTYPE);

%}

/* see https://westes.github.io/flex/manual/Scanner-Options.html */

%option header-file="lexer.h"

%option yylineno
%option noyywrap

%option bison-bridge
%option bison-locations
%option reentrant
%option nounput
%option extra-type="int"

%option debug
%option nodefault
%option verbose
%option warn

WS [ \r\t]+
NL [\n]
DIGIT [0-9]
IDENTIFIER [_A-Za-z][_A-Za-z0-9]*
INTEGER [0-9]+
FLOAT [0-9]*"."[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+|[0-9]+"."([eE][+-]?[0-9]+)?
TRUE "true"
FALSE "false"
LPAREN "("
RPAREN ")"
LBRACE "{"
RBRACE "}"
EQ "=="
NE "!="
LT "<"
GT ">"
LE "<="
GE ">="
PLUS "+"
MINUS "-"
STAR "*"
SLASH "/"
LOG_AND "&&"
LOG_OR "||"
IF "if"
WHILE "while"
FOR "for"
BREAK "break"
CONTINUE "continue"
RETURN "return"
COMMA ","
SEMIC ";"
COLON ":"
QM "?"
ASSIGN "="

%%

{WS} { INC_COLUMN(yyleng); }

{NL} { SET_COLUMN(1); }
{INTEGER} {int x = GET_COLUMN(); INC_COLUMN(yyleng); int y = atoi(yytext); return TOK(TOK_INT, x, y); }
{FLOAT} {int x = GET_COLUMN(); INC_COLUMN(yyleng); double y = atof(yytext); return TOK(TOK_FLOAT, x, y); }
{TRUE} {int x =  GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_TRUE, x); }
{FALSE} {int x =  GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_FALSE, x); }
{LPAREN} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_LPAREN, x); }
{RPAREN} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_RPAREN, x); }
{LBRACE} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_LBRACE, x); }
{RBRACE} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_RBRACE, x); }
{EQ} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_EQ, x); }
{NE} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_NE, x); }
{LT} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_LT, x); }
{GE} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_GE, x); }
{GT} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_GT, x); }
{LE} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_LE, x); }
{PLUS} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_PLUS, x); }
{MINUS} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_MINUS, x); } 
{STAR} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_STAR, x); }
{SLASH} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_SLASH, x); }
{LOG_AND} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_LOG_AND, x); }
{LOG_OR} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_LOG_OR, x); }
{IF} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_IF, x); }
{WHILE} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_WHILE, x); }
{FOR} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_FOR, x); }
{BREAK} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_BREAK, x); }
{CONTINUE} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_CONTINUE, x); }
{RETURN} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_RETURN, x); }
{COMMA} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_COMMA, x); }
{SEMIC} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_SEMIC, x); }
{COLON} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_COLON, x); }
{QM} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_QM, x); }
{ASSIGN} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_ASSIGN, x); }
{IDENTIFIER} {int x = GET_COLUMN(); INC_COLUMN(yyleng); return TOK(TOK_ID, x, std::string { yytext, static_cast<size_t>(yyleng) }); }
. { printf("[error] invalid token.\n"); return TOK(YYUNDEF, GET_COLUMN()); }
%%

int make_symbol(YYSTYPE* val, YYSTYPE sym) {
	val->move(sym);
	return 1;
}
